dist_rd < 400, cattle < 100)
data_scaled <- scale(data)
cor(data_scaled)
corr_matrix <- 1/nrow(data_scaled) * t(data_scaled) %*% data_scaled
View(corr_matrix)
cov(data_scaled)
new <- cov(data_scaled)
View(new)
one <- cor(data_scaled)
View(one)
corr_matrix <- 1/nrow(data_scaled) * t(data_scaled) %*% data_scaled
eigen_vals_and_vecs <- eigen(corr_matrix)
eigen_vals_and_vecs$values
eigen_vals_and_vecs$vectors
svd_matrix <- svd(data_scaled)
svd_matrix$u %*% diag(svd_matrix$d)
svd_matrix$v %*% data_scaled
data_scaled %*% svd_matrix$v
svd_matrix$v
eigen_vals_and_vecs$values / sum(eigen_vals_and_vecs$values)
sqrt(eigen_vals_and_vecs$values) * eigen_vals_and_vecs$vectors[, 1]
eigen_vals_and_vecs$vectors[, 1]
ratings <- structure(
c(
50, 30, 10, 1, 60, 80, 40, 2,
40, 60, 20, 1, 10, 30, 50, 4),
dim = c(4L, 4L),
dimnames = list(
c("High School", "Bachelor's", "Master's", "Doctorate"),
c("Action", "Drama", "Comedy", "Documentary"))
ratings <- structure( c(
50, 30, 10, 1, 60, 80, 40, 2,
40, 60, 20, 1, 10, 30, 50, 4),dim = c(4L, 4L),dimnames = list(c("High School", "Bachelor's", "Master's", "Doctorate"),c("Action", "Drama", "Comedy", "Documentary"))
ratings <- structure( c(50, 30, 10, 1, 60, 80, 40, 2,40, 60, 20, 1, 10, 30, 50, 4),dim = c(4L, 4L),dimnames = list(c("High School", "Bachelor's", "Master's", "Doctorate"),c("Action", "Drama", "Comedy", "Documentary"))
ratings <- structure(c(50, 30, 10, 1, 60, 80, 40, 2,40, 60, 20, 1, 10, 30, 50, 4),dim = c(4L, 4L),dimnames = list(c("High School", "Bachelor's", "Master's", "Doctorate"),c("Action", "Drama", "Comedy", "Documentary")))
View(ratings)
View(ratings)
row_tot <- rowSums(ratings)
col_tot <- colSums(ratings)
N       <- sum(ratings)
#row profiles: each cell / its row sum
row_profiles <- ratings / row_tot
View(row_profiles)
row_tot
ratings / row_tot
ratings
row_tot
# column profiles: each cell / its column sum
col_profiles <- t( t(ratings) / col_tot )
View(col_profiles)
col_tot
t(ratings) /
t(ratings)
c_mass  <- col_tot / N
r_mass  <- row_tot / N
#row χ² distances
rprof  <- row_profiles
Dcol   <- diag(1 / sqrt(c_mass))
Sr     <- rprof %*% Dcol
row_chi2 <- as.matrix(dist(Sr, method = "euclidean")^2)
View(row_chi2)
#column χ² distances
cprof  <- col_profiles
Drow   <- diag(1 / sqrt(r_mass))
Sc     <- Drow %*% t(cprof)
col_chi2 <- as.matrix(dist(t(Sc), method = "euclidean")^2)
# Row χ²‐distance heat‐map
heatmap(row_chi2, scale = "none",col= rev(heat.colors(16)), main   = "Row χ²-Distances",xlab   = "", ylab   = "")
par(mfrow = c(1,2), mar = c(4,4,3,1))
heatmap(row_chi2, scale = "none",col= rev(heat.colors(16)), main   = "Row χ²-Distances",xlab   = "", ylab   = "")
# Column χ²‐distance heat‐map
heatmap(col_chi2,scale  = "none", col= rev(heat.colors(16)),main= "Column χ²-Distances", xlab   = "", ylab   = "")
heatmap(row_chi2, scale = "none",col= rev(heat.colors(16)), main   = "Row χ²-Distances",xlab   = "", ylab   = "", margins= c(5,10),cexCol = 1,cexRow = 1)
par(mfrow = c(1,2))
# Row χ²‐distance heat‐map
heatmap(row_chi2, scale = "none",col= rev(heat.colors(16)), main   = "Row χ²-Distances",xlab   = "", ylab   = "", margins= c(5,10),cexCol = 1,cexRow = 1)
# Column χ²‐distance heat‐map
heatmap(col_chi2,scale  = "none", col= rev(heat.colors(16)),main= "Column χ²-Distances", xlab   = "", ylab   = "")
View(col_chi2)
View(ratings)
cprof  <- col_profiles
Drow   <- diag(1 / sqrt(r_mass))
Sc     <- Drow %*% t(cprof)
col_chi2 <- as.matrix(dist(t(Sc), method = "euclidean")^2)
View(col_chi2)
View(col_profiles)
diag(1 / sqrt(r_mass))
Drow %*% t(cprof)
View(col_profiles)
View(ratings)
View(row_profiles)
c_mass
r_mass  <- row_tot / N
r_mass
row_tot
col_tot
sum(ratings)
ratings <- structure(c(50, 30, 10, 1, 60, 80, 40, 2,40, 60, 20, 1, 10, 30, 50, 4),dim = c(4L, 4L),dimnames = list(c("High School", "Bachelor's", "Master's", "Doctorate"),c("Action", "Drama", "Comedy", "Documentary")))
row_tot <- rowSums(ratings)
col_tot <- colSums(ratings)
N       <- sum(ratings)
#row profiles: each cell / its row sum
row_profiles <- ratings / row_tot
# column profiles: each cell / its column sum
col_profiles <- t( t(ratings) / col_tot )
c_mass
r_mass
c_mass
capabilities()
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(ring = `ring number`,
date_ringed = `date ringed`,
age = age) %>%
mutate(date_ringed = as.Date(date_ringed),
cap_year = if_else(month(date_ringed) >= 9,
year(date_ringed),
year(date_ringed) - 1))
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date sighted on territory`) %>%
mutate(date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9,
year(date_event),
year(date_event) - 1)) %>%
select(ring, year) %>%
mutate(state = 2)   # breeder
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(ring = `ring number`,
date_event = `date of sighting`,
ringed_as = `ringed as`,
loc_status = `location relative to study area`) %>%
filter(ringed_as == "n",          # only birds ringed as nestlings
loc_status != "outside") %>%  # exclude "outside study area"
mutate(date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9,
year(date_event),
year(date_event) - 1)) %>%
select(ring, year) %>%
mutate(state = 1)   # non-breeder
years <- 1997:2019
n_years <- length(years)
setwd("~/Documents/GitHub/research-project")
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(ring = `ring number`,
date_ringed = `date ringed`,
age = age) %>%
mutate(date_ringed = as.Date(date_ringed),
cap_year = if_else(month(date_ringed) >= 9,
year(date_ringed),
year(date_ringed) - 1))
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date sighted on territory`) %>%
mutate(date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9,
year(date_event),
year(date_event) - 1)) %>%
select(ring, year) %>%
mutate(state = 2)   # breeder
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(ring = `ring number`,
date_event = `date of sighting`,
ringed_as = `ringed as`,
loc_status = `location relative to study area`) %>%
filter(ringed_as == "n",          # only birds ringed as nestlings
loc_status != "outside") %>%  # exclude "outside study area"
mutate(date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9,
year(date_event),
year(date_event) - 1)) %>%
select(ring, year) %>%
mutate(state = 1)   # non-breeder
years <- 1997:2019
n_years <- length(years)
# 3. Build events
# Breeders from annual
breeder_events <- annual
# Non-breeders from dispersal
nonbreeder_events <- dispersal
# Capture events from ringing
ring_events <- ringed %>%
mutate(state = case_when(
age %in% c("n","j","juvenile") ~ 1,  # nestlings or juveniles
age == "a" ~ 2,                      # adults = breeders
TRUE ~ NA_real_
)) %>%
select(ring, year = cap_year, state)
all_events <- bind_rows(ring_events, breeder_events, nonbreeder_events) %>%
distinct(ring, year, state) %>%
filter(year %in% years)
all_combos <- expand.grid(
ring = unique(all_events$ring),
year = years
)
full <- all_combos %>%
left_join(all_events, by = c("ring","year")) %>%
arrange(ring, year) %>%
mutate(state = replace_na(state, 0))   # 0 = not observed
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::pivot_wider(
names_from   = year,
values_from  = state,
values_fill  = list(state = 0L)   # explicitly integer
)
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::pivot_wider(
names_from   = year,
values_from  = state,
values_fill  = list(state = 0)
)
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::pivot_wider(
names_from   = year,
values_from  = state,
fill = list(state = 0)   # <- old syntax
)
# ================================
# 6. Write .inp file
# ================================
lines <- enc_hist %>%
mutate(
caphist = apply(select(., -ring), 1, paste0, collapse = ""),
final   = paste0(caphist, " 1 ;")
) %>%
pull(final)
# =============================
# 1. Load the Excel sheets
# =============================
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
all_ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(
ring = `ring number`,
date_ringed = `date ringed`,
age = age
) %>%
mutate(
date_ringed = as.Date(date_ringed),
year = if_else(month(date_ringed) >= 9,
year(date_ringed),
year(date_ringed) - 1L)
) %>%
filter(year >= 1997, year <= 2019)
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(
ring = `ring number`,
date_sighted = `date sighted on territory`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
filter(year >= 1997, year <= 2019)
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(
ring = `ring number`,
date_sighted = `date of sighting`,
ringed_as = `ringed as`,
loc_rel = `location relative to study area`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
filter(year >= 1997, year <= 2019,
ringed_as == "n",          # only birds ringed as nestlings
loc_rel != "outside")      # exclude outside sightings
# Initial capture (ringing)
ring_events <- all_ringed %>%
mutate(
state = case_when(
age %in% c("n","j","juvenile") ~ 1,
age %in% c("a","adult") ~ 2,
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
# Annual (territory sightings → breeders)
annual_events <- annual %>%
mutate(state = 2) %>%
select(ring, year, state)
# Dispersal (non-breeders)
dispersal_events <- dispersal %>%
mutate(state = 1) %>%
select(ring, year, state)
# =============================
# 3. Combine all events
# =============================
events <- bind_rows(ring_events, annual_events, dispersal_events) %>%
distinct(ring, year, .keep_all = TRUE)
years <- 1997:2019
all_combos <- expand.grid(ring = unique(events$ring), year = years)
full <- all_combos %>%
left_join(events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
# =============================
# 4. Build encounter histories
# =============================
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::spread(key = year, value = state, fill = 0)
# collapse to history strings
inp <- enc_hist %>%
mutate(
caphist = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(caphist, " 1 ;")   # freq=1, add ;
) %>%
pull(line)
# =============================
# 5. Write to .inp file
# =============================
writeLines(inp, "peregrine_multistate_final.inp")
View(enc_hist)
View(enc_hist)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
# All ringed (initial marking)
ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date ringed`,
age_class = age) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L),
state = case_when(
age_class %in% c("n","j","juvenile") ~ 1,  # non-breeders
age_class == "a" ~ 2,                     # adults caught = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
# Annual resightings (always breeders)
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date sighted on territory`) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L),
state = 2
) %>%
select(ring, year, state)
# Dispersal resightings (non-breeders)
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(ring = `ring number`,
date_event = `date of sighting`) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L)
) %>%
filter(`ringed as` == "n", !grepl("outside", `location relative to study area`, ignore.case = TRUE)) %>%
mutate(state = 1) %>%
select(ring, year, state)
# --------------------------
# 2. Merge events
# --------------------------
all_events <- bind_rows(ringed, annual, dispersal) %>%
filter(year >= 1997, year <= 2019) %>%
group_by(ring, year) %>%
summarise(state = max(state, na.rm = TRUE), .groups = "drop")
# Fill missing years with 0
years <- 1997:2019
all_combos <- expand.grid(ring = unique(all_events$ring), year = years)
full <- all_combos %>%
left_join(all_events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
# --------------------------
# 3. Wide encounter histories
# --------------------------
enc_hist <- full %>%
arrange(ring, year) %>%
pivot_wider(
names_from = year,
values_from = state,
values_fill = list(state = 0)
)
# --------------------------
# 4. Build MARK .inp lines
# --------------------------
inp_lines <- enc_hist %>%
mutate(
history = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(history, " 1 ;")   # add freq col =1 and semicolon
) %>%
pull(line)
writeLines(inp_lines, "peregrine_multistate_fixed.inp")
View(enc_hist)
View(annual)
View(enc_hist)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
all_ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(
ring = `ring number`,
date_ringed = `date ringed`,
age = age
) %>%
mutate(
date_ringed = as.Date(date_ringed),
year = if_else(month(date_ringed) >= 9,
year(date_ringed),
year(date_ringed) - 1L)
) %>%
filter(year >= 1997, year <= 2019)
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(
ring = `ring number`,
date_sighted = `date sighted on territory`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
filter(year >= 1997, year <= 2019)
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(
ring = `ring number`,
date_sighted = `date of sighting`,
ringed_as = `ringed as`,
loc_rel = `location relative to study area`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
filter(year >= 1997, year <= 2019,
ringed_as == "n",          # only birds ringed as nestlings
loc_rel != "outside")      # exclude outside sightings
# State coding: 0 = not seen, 1 = non-breeder, 2 = breeder
# Initial capture (ringing)
ring_events <- all_ringed %>%
# Exclude juveniles entirely
filter(!age %in% c("j","juvenile")) %>%
mutate(
state = case_when(
age %in% c("n") ~ 1,   # nestlings = non-breeders
age %in% c("a","adult") ~ 2,  # adults = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
# Annual (territory sightings → breeders)
annual_events <- annual %>%
mutate(state = 2) %>%
select(ring, year, state)
# Dispersal (non-breeders)
dispersal_events <- dispersal %>%
mutate(state = 1) %>%
select(ring, year, state)
events <- bind_rows(ring_events, annual_events, dispersal_events) %>%
distinct(ring, year, .keep_all = TRUE)
years <- 1997:2019
all_combos <- expand.grid(ring = unique(events$ring), year = years)
full <- all_combos %>%
left_join(events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::spread(key = year, value = state, fill = 0)
# collapse to history strings
inp <- enc_hist %>%
mutate(
caphist = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(caphist, " 1 ;")   # freq=1, add ;
) %>%
pull(line)
writeLines(inp, "peregrine_multistate_final.inp")
table(all_ringed$age, useNA = "ifany")
View(all_ringed)
# State coding: 0 = not seen, 1 = non-breeder, 2 = breeder
# Initial capture (ringing)
ring_events <- all_ringed %>%
# Exclude juveniles entirely
filter(!age %in% c("j","juvenile")) %>%
mutate(
state = case_when(
age %in% c("n") ~ 1,   # nestlings = non-breeders
age %in% c("a","adult") ~ 2,  # adults = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
> table(all_ringed$age, useNA = "ifany")
> table(all_ringed$age, useNA = "ifany")
table(ring_events$state, useNA = "ifany")
table(all_ringed$age, useNA = "ifany")        # still shows original, unfiltered
table(ring_events$state, useNA = "ifany")     # now only 1 (n) and 2 (a)
# fully time dependent model, no age structure
library(RMark)
# fully time dependent model, no age structure
library(RMark)
# fully time dependent model, no age structure
library(RMark)
install.packages("msm", type = "binary")
install.packages("RMark", type = "binary")
# fully time dependent model, no age structure
library(RMark)
### Data cleaning: Loading the sheets, keep TRI, and build monthly returns for STEFI, ALBI, JSE Industrial
% Paths & file
