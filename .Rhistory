model.Psiage <- list(
S   = list(formula = ~stratum + time),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.Psiage <- mark(ms.processed, ddl, model.parameters = model.Psiage)
# save results
real_estimates3 = fit.Psiage$results$real
real_estimates3 <- data.frame(Parameter=rownames(real_estimates3), real_estimates3)
library(writexl)
write_xlsx(real_estimates3, "real_estimates3.xlsx")
#####survival->age class for nonbreeders####
library(RMark)
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
ms.processed <- process.data(data, model = "Multistrata", strata.labels = c("1","2"))
ddl <- make.design.data(ms.processed)
# Fix breeder → nonbreeder to 0
ddl$Psi$fix[ddl$Psi$stratum=="2" & ddl$Psi$tostratum=="1"] <- 0
# NB survival: 2 age classes
ddl$S$ageclass2 <- cut(ddl$S$Age,
breaks = c(0,2,100),
labels = c("young","older"),
right = FALSE)
# NB→B transitions: 5 age classes
ddl$Psi$ageclass <- cut(ddl$Psi$Age,
breaks = c(0,2,3,4,100),
labels = c("1","2","3","4"),
right = FALSE)
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB <- list(
S   = list(formula = ~stratum + I(stratum=="1")*ageclass2 + I(stratum=="2")*time),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB <- mark(ms.processed, ddl, model.parameters = model.ageNB)
# ---- 8. View results
summary(fit.ageNB)
# save results
real_estimatesNB = fit.ageNB$results$real
real_estimatesNB <- data.frame(Parameter=rownames(real_estimatesNB), real_estimatesNB)
library(writexl)
write_xlsx(real_estimatesNB, "real_estimatesNB.xlsx")
##### survival varying for nonbreeder and constant for breeders#####
library(RMark)
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
ms.processed <- process.data(data, model = "Multistrata", strata.labels = c("1","2"))
ddl <- make.design.data(ms.processed)
# Fix breeder → nonbreeder to 0
ddl$Psi$fix[ddl$Psi$stratum=="2" & ddl$Psi$tostratum=="1"] <- 0
# NB survival: 2 age classes
ddl$S$ageclass2 <- cut(ddl$S$Age,
breaks = c(0,2,100),
labels = c("young","older"),
right = FALSE)
# NB→B transitions: 4 age classes
ddl$Psi$ageclass <- cut(ddl$Psi$Age,
breaks = c(0,2,3,4,100),
labels = c("1","2","3","4"),
right = FALSE)
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB2 <- list(
S   = list(formula = ~stratum + I(stratum=="1")*(ageclass2 + time) + I(stratum=="2")),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB2 <- mark(ms.processed, ddl, model.parameters = model.ageNB2)
# save results
real_estimatesNB2 = fit.ageNB2$results$real
real_estimatesNB2 <- data.frame(Parameter=rownames(real_estimatesNB2), real_estimatesNB2)
library(writexl)
write_xlsx(real_estimatesNB2, "real_estimatesNB2.xlsx")
#####AICs for the above 6 models#####
all.models <- collect.models()
aic.table <- all.models$model.table
write_xlsx(aic.table, "AICc_results.xlsx")
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB <- list(
S   = list(formula = ~ I(stratum=="1")*ageclass2 + I(stratum=="2")*time),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB <- mark(ms.processed, ddl, model.parameters = model.ageNB)
# ---- 8. View results
summary(fit.ageNB)
# save results
real_estimatesNB = fit.ageNB$results$real
real_estimatesNB <- data.frame(Parameter=rownames(real_estimatesNB), real_estimatesNB)
library(writexl)
write_xlsx(real_estimatesNB, "real_estimatesNB.xlsx")
##### survival varying for nonbreeder and constant for breeders#####
library(RMark)
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
ms.processed <- process.data(data, model = "Multistrata", strata.labels = c("1","2"))
ddl <- make.design.data(ms.processed)
# Fix breeder → nonbreeder to 0
ddl$Psi$fix[ddl$Psi$stratum=="2" & ddl$Psi$tostratum=="1"] <- 0
# NB survival: 2 age classes
ddl$S$ageclass2 <- cut(ddl$S$Age,
breaks = c(0,2,100),
labels = c("young","older"),
right = FALSE)
# NB→B transitions: 4 age classes
ddl$Psi$ageclass <- cut(ddl$Psi$Age,
breaks = c(0,2,3,4,100),
labels = c("1","2","3","4"),
right = FALSE)
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB2 <- list(
S   = list(formula = ~I(stratum=="1")*(ageclass2 + time) + I(stratum=="2")),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB2 <- mark(ms.processed, ddl, model.parameters = model.ageNB2)
# save results
real_estimatesNB2 = fit.ageNB2$results$real
real_estimatesNB2 <- data.frame(Parameter=rownames(real_estimatesNB2), real_estimatesNB2)
library(writexl)
write_xlsx(real_estimatesNB2, "real_estimatesNB2.xlsx")
#####AICs for the above 6 models#####
all.models <- collect.models()
aic.table <- all.models$model.table
write_xlsx(aic.table, "AICc_results.xlsx")
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB2 <- list(
S   = list(formula = ~I(stratum=="1")*(ageclass2 + time) + I(stratum=="2")*time),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB2 <- mark(ms.processed, ddl, model.parameters = model.ageNB2)
# save results
real_estimatesNB2 = fit.ageNB2$results$real
real_estimatesNB2 <- data.frame(Parameter=rownames(real_estimatesNB2), real_estimatesNB2)
library(writexl)
write_xlsx(real_estimatesNB2, "real_estimatesNB2.xlsx")
#####AICs for the above 6 models#####
all.models <- collect.models()
aic.table <- all.models$model.table
write_xlsx(aic.table, "AICc_results.xlsx")
# ---- 1. Read your input .inp file
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
# ---- 2. Process the data for multistate model
ms.processed <- process.data(data, model = "Multistrata",
strata.labels = c("1","2"))  # 1=NB, 2=B
# ---- 3. Make design data
ddl <- make.design.data(ms.processed)
# ---- 4. Fix impossible transitions (2→1) to 0
ddl$Psi$fix[ddl$Psi$stratum == "2" & ddl$Psi$tostratum == "1"] <- 0
# ---- 5. Collapse ages into 4 bins (or use provided cutpoints)
ddl$Psi$ageclass <- cut(ddl$Psi$Age,
breaks = c(0,2,3,4,100),
labels = c("1","2","3","4"), right = FALSE)
# ---- 6. Model formula list
model.list1 <- list(
S = list(formula = ~ stratum + time),         # Survival: state + time
p = list(formula = ~ stratum + time),         # Recapture: state + time
Psi = list(formula = ~ time + ageclass)       # Transition: time + age
)
# ---- 7. Fit the model
fit1 <- mark(ms.processed, ddl, model.parameters = model.list1)
# ---- 8. View results
summary(fit1)
#####baseline model#####
library(RMark)
# Load data
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
# Process data
ms.processed <- process.data(data, model = "Multistrata", strata.labels = c("1","2"))
ddl <- make.design.data(ms.processed)
# Fix impossible transitions
ddl$Psi$fix[ddl$Psi$stratum=="2" & ddl$Psi$tostratum=="1"] <- 0
# Model
model.const <- list(
S   = list(formula = ~stratum),
p   = list(formula = ~stratum),
Psi = list(formula = ~1)
)
fit.const <- mark(ms.processed, ddl, model.parameters = model.const)
# save results
real_estimates2 = fit.const$results$real
real_estimates2 <- data.frame(Parameter=rownames(real_estimates2), real_estimates2)
library(writexl)
#####survival->age class for nonbreeders####
library(RMark)
data <- convert.inp("peregrine_multistate_final.inp", group.df = NULL)
ms.processed <- process.data(data, model = "Multistrata", strata.labels = c("1","2"))
ddl <- make.design.data(ms.processed)
# Fix breeder → nonbreeder to 0
ddl$Psi$fix[ddl$Psi$stratum=="2" & ddl$Psi$tostratum=="1"] <- 0
# NB survival: 2 age classes
ddl$S$ageclass2 <- cut(ddl$S$Age,
breaks = c(0,2,100),
labels = c("young","older"),
right = FALSE)
# NB→B transitions: 5 age classes
ddl$Psi$ageclass <- cut(ddl$Psi$Age,
breaks = c(0,2,3,4,100),
labels = c("1","2","3","4"),
right = FALSE)
# Model: NB survival depends on ageclass2, B survival varies by time
model.ageNB <- list(
S   = list(formula = ~ I(stratum=="1")*ageclass2 + I(stratum=="2")*time),
p   = list(formula = ~stratum + time),
Psi = list(formula = ~ageclass)
)
fit.ageNB <- mark(ms.processed, ddl, model.parameters = model.ageNB)
# ---- 8. View results
summary(fit.ageNB)
# save results
real_estimatesNB = fit.ageNB$results$real
real_estimatesNB <- data.frame(Parameter=rownames(real_estimatesNB), real_estimatesNB)
=======
#Build each line with a trailing semicolon
lines <- with(caphist_inp, paste0(caphist, " ", freq, " ;"))
#Write exactly those lines to your .inp
writeLines(lines, "peregrine_merged_.inp")
#checking if there's any all zero entries
#Find which rows sum to zero
zero_rows <- which(rowSums(ch_matrix) == 0)
#Any all‐zero histories?
any_zero_histories <- length(zero_rows) > 0
any_zero_histories    # TRUE/FALSE
#See which birds they are
if (any_zero_histories) {
rownames(ch_matrix)[zero_rows]
}
#no all zero histories here either so we didn't have to remove any
#####new age class histories#####
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
#Process "All ringed"
ring_events <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(
ring       = `ring number`,
date_event = `date ringed`,
age        = age              #one-letter codes: n, j, a OR juvenile
=======
all_combos <- expand.grid(ring = unique(events$ring), year = years)
full <- all_combos %>%
left_join(events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
# =============================
# 4. Build encounter histories
# =============================
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::spread(key = year, value = state, fill = 0)
# collapse to history strings
inp <- enc_hist %>%
mutate(
caphist = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(caphist, " 1 ;")   # freq=1, add ;
) %>%
pull(line)
# =============================
# 5. Write to .inp file
# =============================
writeLines(inp, "peregrine_multistate_final.inp")
View(enc_hist)
View(enc_hist)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
# All ringed (initial marking)
ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date ringed`,
age_class = age) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L),
state = case_when(
age_class %in% c("n","j","juvenile") ~ 1,  # non-breeders
age_class == "a" ~ 2,                     # adults caught = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
# Annual resightings (always breeders)
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
rename(ring = `ring number`,
date_event = `date sighted on territory`) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L),
state = 2
) %>%
select(ring, year, state)
# Dispersal resightings (non-breeders)
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(ring = `ring number`,
date_event = `date of sighting`) %>%
mutate(
date_event = as.Date(date_event),
year = if_else(month(date_event) >= 9, year(date_event), year(date_event) - 1L)
) %>%
filter(`ringed as` == "n", !grepl("outside", `location relative to study area`, ignore.case = TRUE)) %>%
mutate(state = 1) %>%
select(ring, year, state)
# --------------------------
# 2. Merge events
# --------------------------
all_events <- bind_rows(ringed, annual, dispersal) %>%
filter(year >= 1997, year <= 2019) %>%
group_by(ring, year) %>%
summarise(state = max(state, na.rm = TRUE), .groups = "drop")
# Fill missing years with 0
years <- 1997:2019
all_combos <- expand.grid(ring = unique(all_events$ring), year = years)
full <- all_combos %>%
left_join(all_events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
# --------------------------
# 3. Wide encounter histories
# --------------------------
enc_hist <- full %>%
arrange(ring, year) %>%
pivot_wider(
names_from = year,
values_from = state,
values_fill = list(state = 0)
)
# --------------------------
# 4. Build MARK .inp lines
# --------------------------
inp_lines <- enc_hist %>%
mutate(
history = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(history, " 1 ;")   # add freq col =1 and semicolon
) %>%
pull(line)
writeLines(inp_lines, "peregrine_multistate_fixed.inp")
View(enc_hist)
View(annual)
View(enc_hist)
path <- "Peregrine ringing data sightings_1989-2024_13042025.xlsx"
all_ringed <- read_excel(path, sheet = "All ringed", skip = 3) %>%
rename(
ring = `ring number`,
date_ringed = `date ringed`,
age = age
>>>>>>> 8d5f947e67791c50dbcd4910ae139e3ba4c1ada6
) %>%
mutate(
date_ringed = as.Date(date_ringed),
year = if_else(month(date_ringed) >= 9,
year(date_ringed),
year(date_ringed) - 1L)
) %>%
<<<<<<< HEAD
#Drop juvenile rows entirely
filter(age %in% c("n","a"),
cap_year >= 1997, cap_year <= 2019) %>%
select(ring, cap_year, obs, age)
#Process "Re-sightings – annual"
sight_events <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
=======
filter(year >= 1997, year <= 2019)
annual <- read_excel(path, sheet = "Re-sightings - annual", skip = 3) %>%
>>>>>>> 8d5f947e67791c50dbcd4910ae139e3ba4c1ada6
rename(
ring = `ring number`,
date_sighted = `date sighted on territory`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
<<<<<<< HEAD
filter(cap_year >= 1997, cap_year <= 2019,
ring %in% ring_events$ring) %>%
select(ring, cap_year, obs)
#Combine captures and recaptures
dat_all <- bind_rows(ring_events, sight_events) %>%
distinct(ring, cap_year, obs)
#Expand to full bird × season
years <- 1997:2019
all_combos <- expand.grid(
ring     = unique(dat_all$ring),
cap_year = years
)
full <- all_combos %>%
left_join(dat_all, by = c("ring","cap_year")) %>%
mutate(obs = replace_na(obs, 0L))
#Pivot to wide & reattach age
enc_hist <- full %>%
arrange(ring, cap_year) %>%
pivot_wider(
names_from   = cap_year,
values_from  = obs,
names_prefix = "yr",
values_fill  = 0L
) %>%
left_join(ring_events %>% distinct(ring, age), by = "ring")
# fixing input file for marked as young vs adult
library(dplyr)
library(tidyr)
inp_age2 <- enc_hist %>%
mutate(
caphist = apply(select(., starts_with("yr")), 1, paste0, collapse = ""),
age_group = case_when(
age == "n" ~ "nestling",
age == "a" ~ "adult"
)
) %>%
count(caphist, age_group) %>%
pivot_wider(names_from = age_group, values_from = n, values_fill = 0) %>%
arrange(caphist)
lines <- with(inp_age2, paste0(caphist, " ", nestling, " ", adult, " ;"))
writeLines(lines, "peregrine_ya.inp")
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
filter(year >= 1997, year <= 2019)
dispersal <- read_excel(path, sheet = "Re-sightings - dispersal", skip = 2) %>%
rename(
ring = `ring number`,
date_sighted = `date of sighting`,
ringed_as = `ringed as`,
loc_rel = `location relative to study area`
) %>%
mutate(
date_sighted = as.Date(date_sighted),
year = if_else(month(date_sighted) >= 9,
year(date_sighted),
year(date_sighted) - 1L)
) %>%
filter(year >= 1997, year <= 2019,
ringed_as == "n",          # only birds ringed as nestlings
loc_rel != "outside")      # exclude outside sightings
# State coding: 0 = not seen, 1 = non-breeder, 2 = breeder
# Initial capture (ringing)
ring_events <- all_ringed %>%
# Exclude juveniles entirely
filter(!age %in% c("j","juvenile")) %>%
mutate(
state = case_when(
age %in% c("n") ~ 1,   # nestlings = non-breeders
age %in% c("a","adult") ~ 2,  # adults = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
# Annual (territory sightings → breeders)
annual_events <- annual %>%
mutate(state = 2) %>%
select(ring, year, state)
# Dispersal (non-breeders)
dispersal_events <- dispersal %>%
mutate(state = 1) %>%
select(ring, year, state)
events <- bind_rows(ring_events, annual_events, dispersal_events) %>%
distinct(ring, year, .keep_all = TRUE)
years <- 1997:2019
all_combos <- expand.grid(ring = unique(events$ring), year = years)
full <- all_combos %>%
left_join(events, by = c("ring","year")) %>%
mutate(state = replace_na(state, 0))
enc_hist <- full %>%
arrange(ring, year) %>%
tidyr::spread(key = year, value = state, fill = 0)
# collapse to history strings
inp <- enc_hist %>%
mutate(
caphist = apply(select(., -ring), 1, paste0, collapse = ""),
line = paste0(caphist, " 1 ;")   # freq=1, add ;
) %>%
pull(line)
writeLines(inp, "peregrine_multistate_final.inp")
table(all_ringed$age, useNA = "ifany")
View(all_ringed)
# State coding: 0 = not seen, 1 = non-breeder, 2 = breeder
# Initial capture (ringing)
ring_events <- all_ringed %>%
# Exclude juveniles entirely
filter(!age %in% c("j","juvenile")) %>%
mutate(
state = case_when(
age %in% c("n") ~ 1,   # nestlings = non-breeders
age %in% c("a","adult") ~ 2,  # adults = breeders
TRUE ~ NA_real_
)
) %>%
select(ring, year, state)
> table(all_ringed$age, useNA = "ifany")
> table(all_ringed$age, useNA = "ifany")
table(ring_events$state, useNA = "ifany")
table(all_ringed$age, useNA = "ifany")        # still shows original, unfiltered
table(ring_events$state, useNA = "ifany")     # now only 1 (n) and 2 (a)
# fully time dependent model, no age structure
library(RMark)
# fully time dependent model, no age structure
library(RMark)
# fully time dependent model, no age structure
library(RMark)
install.packages("msm", type = "binary")
install.packages("RMark", type = "binary")
# fully time dependent model, no age structure
library(RMark)
### Data cleaning: Loading the sheets, keep TRI, and build monthly returns for STEFI, ALBI, JSE Industrial
% Paths & file
>>>>>>> 8d5f947e67791c50dbcd4910ae139e3ba4c1ada6
